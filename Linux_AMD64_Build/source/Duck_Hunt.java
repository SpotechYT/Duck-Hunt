/* autogenerated by Processing revision 1286 on 2022-10-26 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Duck_Hunt extends PApplet {

/*
DUCK HUNT
By: Haniel Mikhaiel

CONTROLS:
 move your mouse onto the ship and left clikc to shoot

*/




//declare the objects here that you want to see on frame
Tree t;
Duck d1;
Duck d2;
Duck d3;
Dog dog;
Object obj;
PImage m;
SoundFile soundHaha;
SoundFile soundShot;
SoundFile soundMusic;
Foreground fore;

int Score = 0;

//Sphere myBall;
  
//draw function that refreshes the screel
public void draw(){
  //sets background color
  background(0, 0, 200);
  //sets cursor
  cursor(CROSS);
  
  //creates text for score
  textSize(64);
  text("Score: " + Score, 300, 100);
  
  //draws objects on screen
  fore.draw();
  t.draw();
  
  d1.draw();
  d2.draw();
  d3.draw();
  
  dog.draw();
  
  //myBall.draw();
  //myBall.move(0, 0, 1);
}

public void setup(){
   /* size commented out by preprocessor */;//, P3D);
   //initializes sounds
   soundHaha = new SoundFile(this, "haha.mp3"); 
   soundShot = new SoundFile(this, "Shot.mp3");
   soundMusic = new SoundFile(this, "background.mp3");
   

   //creates new objects
   d1 = new Duck(PApplet.parseInt(random(50, 500)), PApplet.parseInt(random(50, 300)), 90, 90); // new Type(input1, input2, input3, ...)
   d2 = new Duck(PApplet.parseInt(random(50, 500)), PApplet.parseInt(random(50, 300)), 90, 90);
   d3 = new Duck(PApplet.parseInt(random(50, 500)), PApplet.parseInt(random(50, 300)), 90, 90);
   t = new Tree(110, 390, 209, 376);
   fore = new Foreground(400, 500, 800, 200);
   dog = new Dog(50, 550, 102, 102);

   //myBall = new Sphere();

   //runs update function
   update();
}

//looping bkg music
public void update(){
  soundMusic.loop();
}

//on mouse pressed
 public void mousePressed() {
  int x1 = mouseX;
  int y1 = mouseY;
  
  int x2 = d1.x;
  int y2 = d1.y;
  
  int x3 = d2.x;
  int y3 = d2.y;
  
  int x4 = d3.x;
  int y4 = d3.y;

  //calculates distance from all objects
  double distance1 = Math.sqrt(Math.pow(x1-x2, 2)+Math.pow(y1-y2, 2));
  double distance2 = Math.sqrt(Math.pow(x1-x3, 2)+Math.pow(y1-y3, 2));
  double distance3 = Math.sqrt(Math.pow(x1-x4, 2)+Math.pow(y1-y4, 2));
  
  //Finds if the distance is less then or equal to 80
  if(distance1 <= 80){
    //updates score, plays sound, and respawns ship
    Score++;
    d1 = new Duck(PApplet.parseInt(random(50, 500)), PApplet.parseInt(random(50, 300)), 90, 90);
    soundShot.play();
  }
  else if(distance2 <= 80){
    //updates score, plays sound, and respawns ship
    Score++;
    d2 = new Duck(PApplet.parseInt(random(50, 500)), PApplet.parseInt(random(50, 300)), 90, 90);
    soundShot.play();
  }
  else if(distance3 <= 80){
    //updates score, plays sound, and respawns ship
    Score++;
    d3 = new Duck(PApplet.parseInt(random(50, 500)), PApplet.parseInt(random(50, 300)), 90, 90);
    soundShot.play();
  }
  else{
    //removes one from score is miss while greater then 0
    if (Score > 0){
      Score--;
    }
    //HAHHAHAHAHAHAHA
    soundHaha.play();
  }
}
public class Foreground{

  //images
  String images[] = {"Foreground.png"};
  PImage img[];
  int x, y;
  int frame = 0;
  int f = 0;
  int animationSpeed = 7; //higher means slower
  int width = 80;
  int height = 80;
  
  //update animation
  public void draw(){
    f++;
    if(f%animationSpeed==0) frame++; 
    image(img[frame%images.length], x, y, width, height);
    
   }
  
  //creatign foreground object
  public Foreground(int x, int y, int width, int height){
    img = new PImage[images.length];
    this.x = x;
    this.y = y;
    for(int i =0; i < images.length; i++){
     img[i] = loadImage(images[i]); 
    }
    
    this.width = width;
    this.height = height;
    
   }
}
public class Dog{

  //indicates picture file locations
  String images[] = { "Sans_Left_1.png", "Sans_Left_2.png"};
  PImage img[];
  int x, y;
  int vx = 0, vy = 0;
  int frame = 0;
  int f = 0;
  int animationSpeed = 10; //higher means slower
  int width = 80;
  int height = 80;
  
  public void draw(){
    //Moving to the Right animation
    if (x < 700){
      vx = 5;
    }
    if(x >= 700){
      vx = 0;
      //shows images 1-1
      image(img[frame%1], x, y, width, height);
    }
      
    x+=vx;
    y+=vy;
   
    f++;
    if(f%animationSpeed==0) frame++; 
    
    //which direction to face while moving
    if (vx < 0){
      scale(1,1);
      //shows images 1-2
      image(img[frame%2], x, y, width, height);
    }
    
    if (vx > 0){
      scale(-1,1);
      //shows images 1-2
      image(img[frame%2], -x, y, width, height);
    }
    
   }
  
  public Dog(int x, int y, int width, int height){
    img = new PImage[images.length];
    this.x = x;
    this.y = y;
    for(int i =0; i < 2; i++){
      img[i] = loadImage(images[i]); 
    }
    
    this.width = width;
    this.height = height;
  }
}
public class Duck {

  //defines images
  String images[] = {"Spaceship_1.png", "Spaceship_2.png", "Spaceship_3.png"};
  PImage img[];
  int x, y;

  
  int vx = PApplet.parseInt(random(4, 6)), vy = PApplet.parseInt(random(4, 6));
  //int vx = 1, vy = 1;
  int animationSpeed = 4; //higher means slower

  
  int frame = 0;
  int f = 0;
  int width = 80;
  int height = 80;

  public void draw() {
    f++;
    //sets the image cordinates to the center of the image
    imageMode(CENTER);

    x+=vx;
    y+=vy;

    //collition with sides detection for image flip
    if (vy < 0){
      pushMatrix();
      scale(1,1);
      image(img[frame%images.length], x, y, width, height);
      popMatrix();
    }
    
    if (vy > 0){
      pushMatrix();
      scale(1,-1);
      image(img[frame%images.length], x, -y, width, height);
      popMatrix();
    }

    //collition with sides detection for turning
    if (x+90>=800) {
      vx *= -1;
    }
    if (x<=0) {
      vx *= -1;
    }
    if (y+90>=400) {
      vy *= -1;
    }
    if (y<=0) {
      vy *= -1;
    }
  }

  //creating the ship object
  public Duck(int x, int y, int width, int height) {
    img = new PImage[images.length];
    this.x = x;
    this.y = y;
    for (int i =0; i < images.length; i++) {
      img[i] = loadImage(images[i]);
    }
    this.width = width;
    this.height = height;
  }

}
public class Sphere{
  
  //attributes for a Sphere object
  int radius;
  String colour;
  double volume;
  
  //add attributes below to locate a Sphere object in a 3D space
  int x, y, z;  
  
  //add a constructor with 0 parameters (no arguments)
  public Sphere(){
    //THE JOB of the constructor is to initialize the properties
    radius = 50;
    colour = "Gold"; //212, 175, 55
    
    x = 250;
    y = 200;
    z = 200;
    
    // 4/3 * pi * r * r * r
    //in processing pi is PI
    // What is Integer division? -> operation between two ints results in an int
    // Why is it an issue in the statement below?!
    volume = (4 / 3.0f)*PI*(radius*radius*radius); 
    
   }
  
   //BEHAVIORS of a class are the METHODS (a.k.a. functions)
   public void move(int xe, int ye, int ze){
     //what happens when somebody calls move on any Sphere object?
     x += xe;
     y += ye;
     z += ze;
   }
   
   //define one other behavior that we can ask of a Sphere object
   public void draw(){
     //call the built-in sphere drawing method by processing
     //pass in the radius as the input
     translate(x, y, z); //if these values are changing, it will translate over time
     sphere(radius);   
   }
}
public class Tree{
   
  String images[] = {"tree.png"};
  PImage img[];
  int x, y;
  int frame = 0;
  int f = 0;
  int animationSpeed = 3; //higher means slower
  int width = 80;
  int height = 80;
  
  //updating animation
  public void draw(){
    f++;
    if(f%animationSpeed==0) frame++; 
    image(img[frame%images.length], x, y, width, height);
    
   }
  
  //creating tree object
  public Tree(int x, int y, int width, int height){
    img = new PImage[images.length];
    this.x = x;
    this.y = y;
    for(int i =0; i < images.length; i++){
     img[i] = loadImage(images[i]); 
    }
    
    this.width = width;
    this.height = height;
  }
  
  
  
  
}


  public void settings() { size(800, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Duck_Hunt" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
